# SPDX-License-Identifier: BSD-3-Clause

config = configuration_data()
config.set('AUTOGEN_HEADER', '/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */')
## Version Information
config.set('COMPILER_NAME', cxx.get_id())
config.set('COMPILER_VERSION', cxx.version())
## Platform information
config.set('TARGET_SYS', target_machine.system())
config.set('TARGET_ARCH', target_machine.cpu())

config.set('BUILD_SYS', build_machine.system())
config.set('BUILD_ARCH', build_machine.cpu())

## Install Details
config.set('INSTALL_PREFIX', get_option('prefix'))
config.set('DATA_DIR', panko_data_dir)

## Misc
config.set('BUGREPORT_URL', get_option('bugreport_url'))
config.set('PYTHON_VERSION', py.language_version())
config.set('LUA_VERSION', lua_dep.version())
config.set('LUA_BACKEND', lua_backend)

config.set('PANKO_SANITIZERS_ENABLED', get_option('b_sanitize') != 'none')
config.set('PANKO_KDE_INTEGRATION', kde_integration.allowed())
config.set('PANKO_WITH_BROTLI', with_brotli)
config.set('PANKO_WITH_SNAPPY', with_snappy)
config.set('PANKO_USING_LUAJIT', lua_backend == 'luajit')

if git.found()
	git_hash = run_command(git, 'rev-parse', '--short', 'HEAD', check: false).stdout().strip()
	if run_command(git, 'diff', '--quiet', check: false).returncode() != 0
		git_hash += '-dirty'
	endif
	config.set('GIT_HASH', git_hash)
	if git_hash != ''
		git_hash = '-@0@'.format(git_hash)
	endif

	describe = run_command(git, 'describe', '--tag', check: false)
	if describe.returncode() == 0
		config.set('VERSION_NUMBER', describe.stdout().strip())
		config.set('VERSION_NUMBER_FULL', '@0@@1@'.format(describe.stdout().strip(), git_hash))
	else
		config.set('VERSION_NUMBER', meson.project_version())
		config.set('VERSION_NUMBER_FULL', '@0@@1@'.format(meson.project_version(), git_hash))
	endif

else
	config.set('VERSION_NUMBER', meson.project_version())
	config.set('GIT_HASH', '')
endif

config_header = configure_file(
	configuration: config,
	input: 'config.hh.in',
	output: 'config.hh'
)

extra_deps = []

if with_brotli
	extra_deps += [ brotli ]
endif

if with_snappy
	extra_deps += [ snappy ]
endif

libpanko_headers = files([

])

libpanko_srcs = files([

])

subdir('capture')
subdir('core')
subdir('dissectors')
subdir('filter')
subdir('internal')
subdir('support')

panko_overrides = [ ]

# Unsure if this is clang bug or not, but can't build with sanitizer on clang without it
if is_clang
	panko_overrides += [
		'b_lundef=false'
	]
endif

libpanko = library(
	'panko',
	libpanko_srcs,
	implicit_include_directories: false,
	include_directories: [
		root_inc, include_directories('.'),
	],
	cpp_args: [
		global_defs, '-DPANKO_BUILD_INTERNAL',
	],
	gnu_symbol_visibility: 'inlineshidden',
	dependencies: [
		threads, spdlog, frozen, bzip2, liblzma, lz4, zlib, zstd,
		py.dependency(embed: true), pybind11, lua_dep,

		extra_deps
	],
	override_options: panko_overrides,
	link_with: [],
	install: true,
)

install_headers(libpanko_headers, subdir: 'panko')
install_headers(config_header,    subdir: 'panko')

if not meson.is_subproject() and not is_windows
	pkgconfig.generate(
		description: 'Crispy and Fried packet dissection',
		name: meson.project_name(),
		filebase: meson.project_name(),
		libraries: [ libpanko, ],
		subdirs: '.',
		url: 'https://github.com/lethalbit/Panko',
	)
endif

libpanko_dep = declare_dependency(
	include_directories: [ root_inc, ],
	dependencies: [ ],
	link_with: [ libpanko, ],
	version: meson.project_version()
)
